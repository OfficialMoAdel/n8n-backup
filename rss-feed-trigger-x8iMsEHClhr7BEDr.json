{"createdAt":"2024-06-24T00:31:11.637Z","updatedAt":"2024-06-24T00:38:41.159Z","id":"x8iMsEHClhr7BEDr","name":"Rss Feed Trigger","active":false,"nodes":[{"parameters":{"pollTimes":{"item":[{"hour":0}]},"feedUrl":"=https://github.com/n8n-io/n8n/releases.atom"},"name":"RSS Feed Trigger","type":"n8n-nodes-base.rssFeedReadTrigger","typeVersion":1,"position":[480,300],"id":"c5906607-93ad-436e-889b-13daa680d5a0"},{"parameters":{"html":"={{ $json }}","destinationKey":"markdown","options":{"bulletMarker":"-"}},"name":"Markdown","type":"n8n-nodes-base.markdown","typeVersion":1,"position":[940,300],"id":"71a7eb05-6a86-411a-aadf-abedae390ebb"},{"parameters":{"options":{}},"name":"Loop Over Items","type":"n8n-nodes-base.splitInBatches","typeVersion":3,"position":[1320,300],"id":"f3a9973e-94dc-4cd9-9149-31c6ad009c6b"},{"parameters":{"jsCode":"const sectionHeaders = [\"### Bug Fixes\", \"### Features\"];\nconst maxCharLength = 2000; // Set the maximum character length for a Telegram message\n\n\nfunction markdownToHtml(markdown) {\n    // Convert Markdown to HTML\n    let html = markdown\n        .replace(/^### (.*$)/gim, '<b>$1</b>')\n        .replace(/^## (.*$)/gim, '<b>$1</b>')\n        .replace(/^# (.*$)/gim, '<b>$1</b>')\n        .replace(/\\n\\n\\n/gim, '\\n\\n')\n        .replace(/\\*\\*(.*?)\\*\\*/gim, '<b>$1</b>')\n          .replace(/\\`(.*?)\\`/gim, '<code>$1</code>')\n        .replace(/\\*(.*?)\\*/gim, '<i>$1</i>')\n        .replace(/\\[([^\\[]+)\\]\\(([^\\)]+)\\)/gim, '<a href=\"$2\">$1</a>');\n\n    // Split the text by new lines and process each line\n    html = html.split('\\n').map(line => {\n        // Count the URLs in the line\n        const urlCount = (line.match(/<a href=\"http[s]?:\\/\\/[^\\s]+\">/g) || []).length;\n\n        // If there are exactly two URLs, wrap the line in <blockquote>\n        if (urlCount === 2) {\n            line = `<blockquote>\\uD83D\\uDD04 ${line}</blockquote>\\n`;\n        }\n\n        return line;\n    }).join('\\n');  // Join the processed lines back with new lines\n\n    return html;\n}\n\n\n\nfunction splitTextBySections(text, sectionHeaders) {\n  const sections = [];\n  let lastIndex = 0;\n\n  sectionHeaders.forEach((header, index) => {\n    const currentIndex = text.indexOf(header, lastIndex);\n    if (currentIndex !== -1) {\n      if (lastIndex !== 0) sections.push(text.substring(lastIndex, currentIndex));\n      lastIndex = currentIndex;\n    }\n    if (index === sectionHeaders.length - 1) sections.push(text.substring(lastIndex));\n  });\n\n  return sections.filter(section => section.trim() !== \"\");\n}\n\nfunction splitSectionsToFit(sections, maxCharLength) {\n    return sections.reduce((acc, section) => {\n        let htmlSection = markdownToHtml(section);\n\n        while (htmlSection.length > 0) {\n            if (calculateVisibleLength(htmlSection) <= maxCharLength) {\n                acc.push(htmlSection);\n                break;\n            }\n\n            // Find a suitable split point\n            let splitIndex = findSplitIndex(htmlSection, maxCharLength);\n\n            let part = htmlSection.substring(0, splitIndex);\n            acc.push(part);\n            htmlSection = htmlSection.substring(splitIndex).trim();\n        }\n\n        return acc;\n    }, []);\n}\n\nfunction calculateVisibleLength(text) {\n    // Remove HTML tags for length calculation\n    let visibleText = text.replace(/<[^>]*>/g, '');\n\n    // Remove URLs\n    visibleText = visibleText.replace(/http[s]?:\\/\\/[^\\s]+/g, '');\n\n    return visibleText.length;\n}\n\nfunction findSplitIndex(text, maxCharLength) {\n    let currentIndex = 0;\n    let lengthCount = 0;\n\n    while (currentIndex < text.length) {\n        let remainingText = text.substring(currentIndex);\n        let nextTagOrUrl = remainingText.match(/<[^>]*>|http[s]?:\\/\\/[^\\s]+/);\n\n        if (nextTagOrUrl) {\n            let nonTagContentLength = nextTagOrUrl.index;\n            if (lengthCount + nonTagContentLength > maxCharLength) {\n                // Can't fit more content without exceeding limit\n                break;\n            }\n\n            // Add non-tag content length and skip over the next tag or URL\n            lengthCount += nonTagContentLength;\n            currentIndex += nextTagOrUrl.index + nextTagOrUrl[0].length;\n        } else {\n            // No more tags or URLs, add remaining text length\n            lengthCount += remainingText.length;\n            if (lengthCount > maxCharLength) {\n                break; // Reached max length with visible content\n            }\n            currentIndex = text.length;\n        }\n    }\n\n    return currentIndex;\n}\n\n\n\nconst originalText = $item(\"0\").$node[\"Markdown\"].json[\"markdown\"][\"content\"]; // Assuming your Markdown content is here\n\nif (!originalText) {\n  throw new Error('Markdown field is missing or not a string');\n}\n\nconst sections = splitTextBySections(originalText, sectionHeaders);\nconst messages = splitSectionsToFit(sections, maxCharLength);\n\nreturn messages.map(message => ({ json: { text: message, parse_mode: \"HTML\" } }));\n"},"name":"Clean & Split","type":"n8n-nodes-base.code","typeVersion":2,"position":[1120,300],"id":"56393063-dbe2-4bf9-9409-a7eafa5e74d8"},{"parameters":{"assignments":{"assignments":[{"id":"fe6e2a01-bd78-46dd-8025-050c00ad1196","name":"telegram bot token","value":"558821444:AAHGkwo4TxsHRiTcfzEwA8PQ4xwY_SSXbs","type":"string"},{"id":"3ee2cada-9ff1-4625-a9ed-78f4890c4862","name":"Telegram Channel / User ID","value":"-1001999012755","type":"string"}]},"includeOtherFields":true,"options":{}},"name":"Config","type":"n8n-nodes-base.set","typeVersion":3.3,"position":[700,300],"id":"fd5c1822-7a22-45c7-ba24-66729173fe1e"},{"parameters":{"url":"=https://api.telegram.org/bot{{ $item(\"0\").$node[\"Config\"].json[\"telegram bot token\"] }}/sendMessage","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"name":"chat_id","value":"={{ $item(\"0\").$node[\"Config\"].json[\"Telegram Channel / User ID\"] }}"},{"name":"text","value":"=To update your n8n instance (Selfhosted) to the {{ '<b>New Update '+$item(\"0\").$node[\"RSS Feed Trigger\"].json[\"title\"].replace('n8n@','V')+'</b>' }}, simply use the \"Auto Update\" Workflow that we've created. This workflow is based on the tutorial on how to correctly install n8n using Coolify. üîÑüöÄ\n\nüíÅ<b>Resources</b>:\n\n- üöÄ How to install Coolify & n8n: n8n.nskha.com\n- üéü 5 Months FREE VPS (4G/2C/2.5Gbps) - Use Coupon: swiy.co/vps\n- ü§ñ ChatGPT n8n Assistant plugin: swiy.co/n8n\n- üí¨ N8N Community Discord: discord.gg/n8n!\n- üí¨ N8N Community Discourse: community.n8n.io!\n- ‚úÖ Nskha Verified templates: n8n.io/creators/nskha!\n- ‚òÅÔ∏è N8N Cloud (Official Version - Ultimate Stable Option): swiy.co/n8n-cloud"},{"name":"parse_mode","value":"HTML"},{"name":"link_preview_options","value":"={\n  \"is_disabled\": false,\n  \"prefer_large_media\": true,\n  \"show_above_text\": true,\n  \"url\": \"https://cdn.statically.io/og/theme=dark,fontsize=275px/Release%20{{ 'V'+$('RSS Feed Trigger').item.json[\"title\"].replace('n8n@','') }}.jpg\"\n}"},{"name":"disable_notification","value":"true"},{"name":"reply_markup","value":"={{ $runIndex === 0 ? JSON.stringify({\n  \"inline_keyboard\": [\n    [\n      {\n        \"text\": \"Read more about New Update \"+$item(\"0\").$node[\"RSS Feed Trigger\"].json[\"title\"].replace('n8n@','V'),\n        \"url\": \"https://f.customer.men/\"+$item(\"0\").$node[\"RSS Feed Trigger\"].json[\"link\"].replace(\"https://\",\"\")\n      }\n    ]\n  ]\n}) : '' }}"}]},"options":{}},"name":"Final","type":"n8n-nodes-base.httpRequest","typeVersion":4.1,"position":[1560,200],"id":"257191b9-e722-45cd-af82-072899be8b90"},{"parameters":{"url":"=https://api.telegram.org/bot{{ $item(\"0\").$node[\"Config\"].json[\"telegram bot token\"] }}/sendMessage","sendBody":true,"contentType":"multipart-form-data","bodyParameters":{"parameters":[{"name":"chat_id","value":"={{ $item(\"0\").$node[\"Config\"].json[\"Telegram Channel / User ID\"] }}"},{"name":"text","value":"={{ $runIndex === 0 ? '<pre class=\"language-Releases\"><b>New Update '+$item(\"0\").$node[\"RSS Feed Trigger\"].json[\"title\"].replace('n8n@','V')+'</b></pre>\\n\\n' : '' }}{{ $json.text }}"},{"name":"parse_mode","value":"HTML"},{"name":"link_preview_options","value":"={\n  \"is_disabled\": {{ $runIndex >= 0 ? 'false' : 'true' }},\n  \"prefer_large_media\": true,\n  \"show_above_text\": true,\n  \"url\": \"https://github.com/n8n-io/n8n/releases\"\n}"},{"name":"disable_notification","value":"true"},{"name":"reply_markup","value":"={{ $runIndex === 0 ? JSON.stringify({\n  \"inline_keyboard\": [\n    [\n      {\n        \"text\": \"Read more about New Update \"+$item(\"0\").$node[\"RSS Feed Trigger\"].json[\"title\"].replace('n8n@','V'),\n        \"url\": \"https://f.customer.men/\"+$item(\"0\").$node[\"RSS Feed Trigger\"].json[\"link\"].replace(\"https://\",\"\")\n      }\n    ]\n  ]\n}) : '' }}"},{"name":"reply_to_message","value":"={{ $runIndex >= 1 ? $node[\"message_id\"].json[\"result\"][\"message_id\"] : '' }}"}]},"options":{}},"name":"Loop","type":"n8n-nodes-base.httpRequest","typeVersion":4.1,"position":[1560,380],"id":"ddbc20b0-253d-40a6-b5da-dc06f8b7a5ed"},{"parameters":{"assignments":{"assignments":[{"id":"8d444290-cf8a-40f5-8f41-57388bcfac3c","name":"result.message_id","value":"={{ $json.result.message_id }}","type":"number"}]},"options":{}},"name":"message_id","type":"n8n-nodes-base.set","typeVersion":3.3,"position":[1700,380],"id":"c6bc507f-a313-4669-a5c6-8574847f8bf4"},{"parameters":{"content":"## Readme\nUsage:\n- Update the `Rss Feed Trigger` with your own Github Repository `ID` and `Repo`.\n `https://github.com/(Username Here)/(Repo Here)/releases.atom`\n- Update the `Config Node` with your own `Telegram Bot Token` & `Channel` or `Account` ID.\n- Update the Message in `Final Node` As it contain promotional information regarding the repository used which is n8n in this usecase.\n\n\n\n\n\n\n\n\n\n\n\n\n[![N8N Creator Profile - Nskha](https://cdn.statically.io/gh/Automations-Project/n8n-templates/main/stats.min.svg)](https://n8n.io/creators/nskha)","height":536.138680979265,"width":1451.2466020291768,"color":6},"name":"Sticky Note","type":"n8n-nodes-base.stickyNote","typeVersion":1,"position":[440,120],"id":"4bf55827-c728-47ff-8e67-71c1e6df5d27"}],"connections":{"RSS Feed Trigger":{"main":[[{"node":"Config","type":"main","index":0}]]},"Markdown":{"main":[[{"node":"Clean & Split","type":"main","index":0}]]},"Loop Over Items":{"main":[[{"node":"Final","type":"main","index":0}],[{"node":"Loop","type":"main","index":0}]]},"Clean & Split":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]},"Config":{"main":[[{"node":"Markdown","type":"main","index":0}]]},"Loop":{"main":[[{"node":"message_id","type":"main","index":0}]]},"message_id":{"main":[[{"node":"Loop Over Items","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"0d456b25-efa9-4c25-9831-d41e79509fbb","triggerCount":0,"tags":[{"createdAt":"2024-06-24T00:30:51.840Z","updatedAt":"2024-06-24T00:30:51.840Z","id":"fIhN1LScWbEb7gpY","name":"RssFeedReadTrigger"},{"createdAt":"2024-06-24T00:30:51.851Z","updatedAt":"2024-06-24T00:30:51.851Z","id":"F80kuKgOVcJfEiOL","name":"Markdown"},{"createdAt":"2024-06-24T00:30:51.873Z","updatedAt":"2024-06-24T00:30:51.873Z","id":"5j3ClBsfeNPAdV6z","name":"SplitInBatches"},{"createdAt":"2024-06-24T00:30:51.862Z","updatedAt":"2024-06-24T00:30:51.862Z","id":"tMQXZYacnOHkr8mF","name":"Code"},{"createdAt":"2024-06-24T00:30:51.864Z","updatedAt":"2024-06-24T00:30:51.864Z","id":"gGz7O0rNqSTfYzZA","name":"HttpRequest"}]}