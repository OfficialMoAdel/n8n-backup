{"createdAt":"2024-12-10T11:58:04.715Z","updatedAt":"2024-12-11T21:54:33.489Z","id":"rPa06sRsR2GKaStG","name":"Automate Google Analytics Reporting","active":false,"nodes":[{"parameters":{},"id":"ebade135-2c32-49ec-90aa-2338cc2b3644","name":"When clicking ‘Test workflow’","type":"n8n-nodes-base.manualTrigger","position":[60,580],"typeVersion":1},{"parameters":{"content":"# Aggregate Google Analytics data and Email the results\n\nThis workflow will check for country views, page engagement and google search console results. It will take this week's data and compare it to last week's data.\n\n[Credit to Keith Rumjahn for the original workflow, which I modified.](https://rumjahn.com/how-i-used-a-i-to-be-an-seo-expert-and-analyzed-my-google-analytics-data-in-n8n-and-make-com/)","height":209.13454984057833,"width":1270.4518485107694,"color":6},"id":"0fa42d69-2f76-4d52-a85e-2bbbd40e1d39","name":"Sticky Note","type":"n8n-nodes-base.stickyNote","position":[260,0],"typeVersion":1},{"parameters":{"content":"## Property ID\n\n1. Create your [Google Analytics Credentials](https://docs.n8n.io/integrations/builtin/credentials/google/oauth-single-service/?utm_source=n8n_app&utm_medium=credential_settings&utm_campaign=create_new_credentials_modal)\n2. Enter your [property ID](https://developers.google.com/analytics/devguides/reporting/data/v1/property-id) or Choose from the List of Properties.","height":745.919853945687,"width":1269.8517211291685,"color":4},"id":"7ba17d85-c0ef-4f6f-ab77-0b26c6ad3407","name":"Sticky Note1","type":"n8n-nodes-base.stickyNote","position":[260,240],"typeVersion":1},{"parameters":{"propertyId":{"__rl":true,"mode":"list","value":"420633845","cachedResultUrl":"https://analytics.google.com/analytics/web/#/p420633845/","cachedResultName":"Kenetic Brand Builders"},"metricsGA4":{"metricValues":[{"listName":"other","name":"screenPageViews"},{"listName":"other","name":"activeUsers"},{"listName":"other","name":"screenPageViewsPerUser"},{"listName":"other","name":"eventCount"}]},"dimensionsGA4":{"dimensionValues":[{"listName":"other","name":"unifiedScreenName"}]},"returnAll":true,"simple":false,"additionalFields":{"keepEmptyRows":true}},"id":"4aeef0dc-bcfa-442e-be14-43133d4d527d","name":"Get Page Engagement Stats for this week","type":"n8n-nodes-base.googleAnalytics","position":[340,380],"typeVersion":2,"credentials":{"googleAnalyticsOAuth2":{"id":"EE6nQ28j8Cj7cEUt","name":"Google Analytics account"}}},{"parameters":{"propertyId":{"__rl":true,"mode":"list","value":"420633845","cachedResultUrl":"https://analytics.google.com/analytics/web/#/p420633845/","cachedResultName":"Kenetic Brand Builders"},"dateRange":"custom","startDate":"={{$today.minus({days: 14})}}","endDate":"={{$today.minus({days: 7})}}","metricsGA4":{"metricValues":[{"listName":"other","name":"screenPageViews"},{"listName":"other","name":"activeUsers"},{"listName":"other","name":"screenPageViewsPerUser"},{"listName":"other","name":"eventCount"}]},"dimensionsGA4":{"dimensionValues":[{"listName":"other","name":"unifiedScreenName"}]},"returnAll":true,"simple":false,"additionalFields":{"keepEmptyRows":true}},"id":"00effa82-23c6-4de9-9234-a637474d5db4","name":"Get Page Engagement Stats for prior week","type":"n8n-nodes-base.googleAnalytics","position":[740,380],"typeVersion":2,"credentials":{"googleAnalyticsOAuth2":{"id":"EE6nQ28j8Cj7cEUt","name":"Google Analytics account"}}},{"parameters":{"propertyId":{"__rl":true,"mode":"list","value":"420633845","cachedResultUrl":"https://analytics.google.com/analytics/web/#/p420633845/","cachedResultName":"Kenetic Brand Builders"},"metricsGA4":{"metricValues":[{"listName":"other","name":"activeUsers"},{"listName":"other","name":"engagedSessions"},{"listName":"other","name":"engagementRate"},{"listName":"other","name":"eventCount"},{"listName":"other","name":"organicGoogleSearchAveragePosition"},{"listName":"other","name":"organicGoogleSearchClickThroughRate"},{"listName":"other","name":"organicGoogleSearchClicks"},{"listName":"other","name":"organicGoogleSearchImpressions"}]},"dimensionsGA4":{"dimensionValues":[{"listName":"other","name":"landingPagePlusQueryString"}]},"returnAll":true,"simple":false,"additionalFields":{"keepEmptyRows":true}},"id":"c42b9b2e-31f9-40c3-b692-a339555e935b","name":"Get Google Search Results for this week","type":"n8n-nodes-base.googleAnalytics","position":[1140,380],"typeVersion":2,"credentials":{"googleAnalyticsOAuth2":{"id":"EE6nQ28j8Cj7cEUt","name":"Google Analytics account"}}},{"parameters":{"propertyId":{"__rl":true,"mode":"list","value":"420633845","cachedResultUrl":"https://analytics.google.com/analytics/web/#/p420633845/","cachedResultName":"Kenetic Brand Builders"},"metricsGA4":{"metricValues":[{"listName":"other","name":"activeUsers"},{"listName":"other","name":"newUsers"},{"listName":"other","name":"engagementRate"},{"listName":"other","name":"engagedSessions"},{"listName":"other","name":"eventCount"},{"listName":"other"},{"listName":"other","name":"sessions"}]},"dimensionsGA4":{"dimensionValues":[{"listName":"other","name":"country"}]},"returnAll":true,"simple":false,"additionalFields":{"keepEmptyRows":true}},"id":"87b035d1-3d4b-45ba-a6d2-e6ea6f8776e0","name":"Get Country views data for this week","type":"n8n-nodes-base.googleAnalytics","position":[740,580],"typeVersion":2,"credentials":{"googleAnalyticsOAuth2":{"id":"EE6nQ28j8Cj7cEUt","name":"Google Analytics account"}}},{"parameters":{"content":"## AlexK1919 \n![Alex Kim](https://media.licdn.com/dms/image/v2/D5603AQFOYMkqCPl6Sw/profile-displayphoto-shrink_400_400/profile-displayphoto-shrink_400_400/0/1718309808352?e=1736985600&v=beta&t=pQKm7lQfUU1ytuC2Gq1PRxNY-XmROFWbo-BjzUPxWOs)\n\nI’m Alex Kim, an AI-Native Workflow Automation Architect Building Solutions to Optimize your Personal and Professional Life.\n\n[Info](https://beacons.ai/alexk1919)","height":986.0715248510506,"width":231.71528995536218,"color":6},"id":"9658185f-173d-428b-9142-01447880e871","name":"Sticky Note4","type":"n8n-nodes-base.stickyNote","position":[0,0],"typeVersion":1},{"parameters":{"jsCode":"// Helper function to decode and parse a URL-encoded JSON string\nfunction decodeUrlString(urlString) {\n    try {\n        const decoded = JSON.parse(decodeURIComponent(urlString));\n        console.log('Decoded URL string:', JSON.stringify(decoded, null, 2));\n        return decoded;\n    } catch (error) {\n        console.log('Error decoding URL string:', error.message);\n        return [];\n    }\n}\n\n// Main function to aggregate data\nfunction aggregateData(items) {\n    // Extract each urlString from the input\n    const data = items[0]?.json; // Get the first JSON object from input\n\n    if (!data) {\n        console.log('No data found in input items.');\n        return {};\n    }\n\n    // Decode each urlString\n    const engagementStatsThisWeek = decodeUrlString(data.urlString1 || '');\n    const engagementStatsPriorWeek = decodeUrlString(data.urlString2 || '');\n    const searchResultsThisWeek = decodeUrlString(data.urlString3 || '');\n    const searchResultsLastWeek = decodeUrlString(data.urlString4 || '');\n    const countryViewsThisWeek = decodeUrlString(data.urlString5 || '');\n    const countryViewsLastWeek = decodeUrlString(data.urlString6 || '');\n\n    // Aggregate the decoded data into a structured object\n    const aggregatedData = {\n        engagementStats: {\n            thisWeek: engagementStatsThisWeek,\n            priorWeek: engagementStatsPriorWeek,\n        },\n        searchResults: {\n            thisWeek: searchResultsThisWeek,\n            lastWeek: searchResultsLastWeek,\n        },\n        countryViews: {\n            thisWeek: countryViewsThisWeek,\n            lastWeek: countryViewsLastWeek,\n        },\n    };\n\n    console.log('Final Aggregated Data:', JSON.stringify(aggregatedData, null, 2));\n    return aggregatedData;\n}\n\n// Get input data from all nodes\nconst items = $input.all();\nconsole.log('Input items to Aggregate Data:', JSON.stringify(items, null, 2));\n\n// Perform aggregation\nconst aggregatedResult = aggregateData(items);\n\n// Output the aggregated result for downstream processing\nreturn { json: aggregatedResult };\n"},"id":"09daef58-a9b1-4710-a27a-c042fb8711a3","name":"Aggregate Data","type":"n8n-nodes-base.code","position":[540,780],"typeVersion":2},{"parameters":{"propertyId":{"__rl":true,"mode":"list","value":"420633845","cachedResultUrl":"https://analytics.google.com/analytics/web/#/p420633845/","cachedResultName":"Kenetic Brand Builders"},"dateRange":"custom","startDate":"={{$today.minus({days: 14})}}","endDate":"={{$today.minus({days: 7})}}","metricsGA4":{"metricValues":[{"listName":"other","name":"activeUsers"},{"listName":"other","name":"engagedSessions"},{"listName":"other","name":"engagementRate"},{"listName":"other","name":"eventCount"},{"listName":"other","name":"organicGoogleSearchAveragePosition"},{"listName":"other","name":"organicGoogleSearchClickThroughRate"},{"listName":"other","name":"organicGoogleSearchClicks"},{"listName":"other","name":"organicGoogleSearchImpressions"}]},"dimensionsGA4":{"dimensionValues":[{"listName":"other","name":"landingPagePlusQueryString"}]},"returnAll":true,"simple":false,"additionalFields":{"keepEmptyRows":true}},"id":"136acf08-84ba-4356-a445-e101e1bf0612","name":"Get Google Search Results for prior week","type":"n8n-nodes-base.googleAnalytics","position":[340,580],"typeVersion":2,"credentials":{"googleAnalyticsOAuth2":{"id":"EE6nQ28j8Cj7cEUt","name":"Google Analytics account"}}},{"parameters":{"propertyId":{"__rl":true,"mode":"list","value":"420633845","cachedResultUrl":"https://analytics.google.com/analytics/web/#/p420633845/","cachedResultName":"Kenetic Brand Builders"},"dateRange":"custom","startDate":"={{$today.minus({days: 14})}}","endDate":"={{$today.minus({days: 7})}}","metricsGA4":{"metricValues":[{"listName":"other","name":"activeUsers"},{"listName":"other","name":"newUsers"},{"listName":"other","name":"engagementRate"},{"listName":"other","name":"engagedSessions"},{"listName":"other","name":"eventCount"},{"listName":"other"},{"listName":"other","name":"sessions"}]},"dimensionsGA4":{"dimensionValues":[{"listName":"other","name":"country"}]},"returnAll":true,"simple":false,"additionalFields":{"keepEmptyRows":true}},"id":"279274a0-fda3-4138-9521-24a30e494599","name":"Get Country views data for prior week","type":"n8n-nodes-base.googleAnalytics","position":[1140,580],"typeVersion":2,"credentials":{"googleAnalyticsOAuth2":{"id":"EE6nQ28j8Cj7cEUt","name":"Google Analytics account"}}},{"parameters":{"jsCode":"function transformToUrlString(items) {\n    // Debug logging\n    console.log('Input items:', JSON.stringify(items, null, 2));\n    \n    // Check if items is an array and has content\n    if (!Array.isArray(items) || items.length === 0) {\n        console.log('Items is not an array or is empty');\n        throw new Error('Invalid data structure');\n    }\n\n    // Check if first item exists and has json property\n    if (!items[0] || !items[0].json) {\n        console.log('First item is missing or has no json property');\n        throw new Error('Invalid data structure');\n    }\n\n    // Get the analytics data\n    const analyticsData = items[0].json;\n    \n    // Check if analyticsData has rows\n    if (!analyticsData || !Array.isArray(analyticsData.rows)) {\n        console.log('Analytics data is missing or has no rows array');\n        throw new Error('Invalid data structure');\n    }\n    \n    // Map each row to a simplified object\n    const simplified = analyticsData.rows.map(row => {\n        if (!row.dimensionValues?.[0]?.value || !row.metricValues?.length) {\n            console.log('Invalid row structure:', row);\n            throw new Error('Invalid row structure');\n        }\n        \n        return {\n            page: row.dimensionValues[0].value,\n            pageViews: parseInt(row.metricValues[0].value) || 0,\n            activeUsers: parseInt(row.metricValues[1].value) || 0,\n            viewsPerUser: parseFloat(row.metricValues[2].value) || 0,\n            eventCount: parseInt(row.metricValues[3].value) || 0\n        };\n    });\n    \n    // Convert to JSON string and encode for URL\n    return encodeURIComponent(JSON.stringify(simplified));\n}\n\n// Get input data and transform it\nconst urlString = transformToUrlString($input.all());\n\n// Return the result\nreturn { json: { urlString } };"},"id":"c70facdf-f921-4c4a-99b0-b064167bae18","name":"Parse - Get Page Engagement This Week","type":"n8n-nodes-base.code","position":[540,380],"typeVersion":2},{"parameters":{"jsCode":"function transformToUrlString(items) {\n    // Debug logging\n    console.log('Input items:', JSON.stringify(items, null, 2));\n    \n    // Check if items is an array and has content\n    if (!Array.isArray(items) || items.length === 0) {\n        console.log('Items is not an array or is empty');\n        throw new Error('Invalid data structure');\n    }\n\n    // Check if first item exists and has json property\n    if (!items[0] || !items[0].json) {\n        console.log('First item is missing or has no json property');\n        throw new Error('Invalid data structure');\n    }\n\n    // Get the analytics data\n    const analyticsData = items[0].json;\n    \n    // Check if analyticsData has rows\n    if (!analyticsData || !Array.isArray(analyticsData.rows)) {\n        console.log('Analytics data is missing or has no rows array');\n        throw new Error('Invalid data structure');\n    }\n    \n    // Filter out invalid rows and map each valid row to a simplified object\n    const simplified = analyticsData.rows\n        .filter(row => {\n            // Check if row is valid and its properties exist\n            const isValid = row \n                && row.dimensionValues \n                && row.dimensionValues[0] \n                && row.dimensionValues[0].value \n                && row.metricValues \n                && row.metricValues.length > 0;\n            \n            if (!isValid) {\n                console.log('Ignoring invalid or null row:', row);\n            }\n            return isValid;\n        })\n        .map(row => ({\n            page: row.dimensionValues[0].value,\n            pageViews: parseInt(row.metricValues[0].value) || 0,\n            activeUsers: parseInt(row.metricValues[1]?.value) || 0,\n            viewsPerUser: parseFloat(row.metricValues[2]?.value) || 0,\n            eventCount: parseInt(row.metricValues[3]?.value) || 0\n        }));\n    \n    // Convert to JSON string and encode for URL\n    return encodeURIComponent(JSON.stringify(simplified));\n}\n\n// Get input data and transform it\nconst urlString = transformToUrlString($input.all());\n\n// Return the result\nreturn { json: { urlString } };\n"},"id":"4b932117-fe03-4e90-8313-5be2cdf0526b","name":"Parse - Get Page Engagement Prior Week","type":"n8n-nodes-base.code","position":[940,380],"typeVersion":2},{"parameters":{"jsCode":"function transformToUrlString(items) {\n    // Check if items is an array and get the JSON property\n    const data = items[0]?.json;\n\n    if (!data || !Array.isArray(data.rows)) {\n        console.log('No valid data found');\n        return encodeURIComponent(JSON.stringify([]));\n    }\n\n    try {\n        // Process each row, skipping invalid or null entries\n        const simplified = data.rows\n            .filter(row => {\n                // Skip null rows or rows without dimensionValues or metricValues\n                const isValid = row && row.dimensionValues && Array.isArray(row.metricValues);\n                if (!isValid) {\n                    console.log('Skipping invalid row:', row);\n                }\n                return isValid;\n            })\n            .map(row => ({\n                page: row.dimensionValues[0]?.value || 'Unknown',\n                activeUsers: parseInt(row.metricValues[0]?.value) || 0,\n                engagedSessions: parseInt(row.metricValues[1]?.value) || 0,\n                engagementRate: parseFloat(row.metricValues[2]?.value) || 0.0,\n                eventCount: parseInt(row.metricValues[3]?.value) || 0,\n                avgPosition: parseFloat(row.metricValues[4]?.value) || 0.0,\n                ctr: parseFloat(row.metricValues[5]?.value) || 0.0,\n                clicks: parseInt(row.metricValues[6]?.value) || 0,\n                impressions: parseInt(row.metricValues[7]?.value) || 0\n            }));\n\n        // Encode the simplified data as a URL-safe string\n        return encodeURIComponent(JSON.stringify(simplified));\n    } catch (error) {\n        console.log('Error processing data:', error.message);\n        throw new Error('Invalid data structure');\n    }\n}\n\n// Get the input data\nconst items = $input.all();\n\n// Process the data\nconst result = transformToUrlString(items);\n\n// Return the result\nreturn { json: { urlString: result } };\n"},"id":"c5122656-180a-42a9-ae8c-b3bf0da38ab2","name":"Parse - Get Google Search This Week","type":"n8n-nodes-base.code","position":[1340,380],"typeVersion":2},{"parameters":{"jsCode":"function transformToUrlString(items) {\n    // Ensure the input is valid and contains data\n    const data = items[0]?.json;\n\n    if (!data || !Array.isArray(data.rows)) {\n        console.log('No valid data found');\n        return encodeURIComponent(JSON.stringify([]));\n    }\n\n    try {\n        // Process each row, skipping null or invalid rows\n        const simplified = data.rows\n            .filter(row => {\n                // Skip null rows\n                const isValid = row && row.dimensionValues && Array.isArray(row.metricValues);\n                if (!isValid) {\n                    console.log('Skipping invalid or null row:', row);\n                }\n                return isValid;\n            })\n            .map(row => ({\n                page: row.dimensionValues[0]?.value || 'Unknown',\n                activeUsers: parseInt(row.metricValues[0]?.value) || 0,\n                engagedSessions: parseInt(row.metricValues[1]?.value) || 0,\n                engagementRate: parseFloat(row.metricValues[2]?.value) || 0.0,\n                eventCount: parseInt(row.metricValues[3]?.value) || 0,\n                avgPosition: parseFloat(row.metricValues[4]?.value) || 0.0,\n                ctr: parseFloat(row.metricValues[5]?.value) || 0.0,\n                clicks: parseInt(row.metricValues[6]?.value) || 0,\n                impressions: parseInt(row.metricValues[7]?.value) || 0\n            }));\n\n        // If no valid rows, return an empty array\n        if (simplified.length === 0) {\n            console.log('No valid rows to process');\n            return encodeURIComponent(JSON.stringify([]));\n        }\n\n        // Encode the simplified data as a URL-safe string\n        return encodeURIComponent(JSON.stringify(simplified));\n    } catch (error) {\n        console.log('Error processing data:', error.message);\n        throw new Error('Invalid data structure');\n    }\n}\n\n// Get the input data\nconst items = $input.all();\n\n// Process the data\nconst result = transformToUrlString(items);\n\n// Return the result\nreturn { json: { urlString: result } };\n"},"id":"5cc359eb-35a1-4a13-bdaa-10a8fe9699d8","name":"Parse - Get Google Search Prior Week","type":"n8n-nodes-base.code","position":[540,580],"typeVersion":2},{"parameters":{"jsCode":"function transformToUrlString(items) {\n    // In n8n, we need to check if items is an array and get the json property\n    const data = items[0].json;\n    \n    if (!data || !data.rows) {\n        console.log('No valid data found');\n        return encodeURIComponent(JSON.stringify([]));\n    }\n    \n    try {\n        // Process each row\n        const simplified = data.rows.map(row => ({\n            country: row.dimensionValues[0].value,\n            activeUsers: parseInt(row.metricValues[0].value) || 0,\n            newUsers: parseInt(row.metricValues[1].value) || 0,\n            engagementRate: parseFloat(row.metricValues[2].value) || 0,\n            engagedSessions: parseInt(row.metricValues[3].value) || 0,\n            eventCount: parseInt(row.metricValues[4].value) || 0,\n            totalUsers: parseInt(row.metricValues[5].value) || 0,\n            sessions: parseInt(row.metricValues[6].value) || 0\n        }));\n        \n        return encodeURIComponent(JSON.stringify(simplified));\n    } catch (error) {\n        console.log('Error processing data:', error);\n        throw new Error('Invalid data structure');\n    }\n}\n\n// Get the input data\nconst items = $input.all();\n\n// Process the data\nconst result = transformToUrlString(items);\n\n// Return the result\nreturn { json: { urlString: result } };"},"id":"c3d4bf0c-706c-4112-8764-acd67b6e169a","name":"Parse - Country Views This Week","type":"n8n-nodes-base.code","position":[940,580],"typeVersion":2},{"parameters":{"jsCode":"function transformToUrlString(items) {\n    // Ensure the input is valid and contains data\n    const data = items[0]?.json;\n\n    if (!data || !Array.isArray(data.rows)) {\n        console.log('No valid data found');\n        return encodeURIComponent(JSON.stringify([]));\n    }\n\n    try {\n        // Process each row, skipping invalid or null rows\n        const simplified = data.rows\n            .filter(row => {\n                // Skip null rows or rows without required properties\n                const isValid = row && row.dimensionValues && Array.isArray(row.metricValues);\n                if (!isValid) {\n                    console.log('Skipping invalid or null row:', row);\n                }\n                return isValid;\n            })\n            .map(row => ({\n                country: row.dimensionValues[0]?.value || 'Unknown',\n                activeUsers: parseInt(row.metricValues[0]?.value) || 0,\n                newUsers: parseInt(row.metricValues[1]?.value) || 0,\n                engagementRate: parseFloat(row.metricValues[2]?.value) || 0.0,\n                engagedSessions: parseInt(row.metricValues[3]?.value) || 0,\n                eventCount: parseInt(row.metricValues[4]?.value) || 0,\n                totalUsers: parseInt(row.metricValues[5]?.value) || 0,\n                sessions: parseInt(row.metricValues[6]?.value) || 0\n            }));\n\n        // If no valid rows, return an empty array\n        if (simplified.length === 0) {\n            console.log('No valid rows to process');\n            return encodeURIComponent(JSON.stringify([]));\n        }\n\n        // Encode the simplified data as a URL-safe string\n        return encodeURIComponent(JSON.stringify(simplified));\n    } catch (error) {\n        console.log('Error processing data:', error.message);\n        throw new Error('Invalid data structure');\n    }\n}\n\n// Get the input data\nconst items = $input.all();\n\n// Process the data\nconst result = transformToUrlString(items);\n\n// Return the result\nreturn { json: { urlString: result } };\n"},"id":"4edd1a3a-20ec-4d09-8007-a43bdd854c81","name":"Parse - Country Views Prior Week","type":"n8n-nodes-base.code","position":[1340,580],"typeVersion":2},{"parameters":{"assignments":{"assignments":[{"id":"93efb02f-f2f2-4e52-aa7a-3ccd1fb171cc","name":"urlString1","type":"string","value":"={{ $('Parse - Get Page Engagement This Week').first().json.urlString }}"},{"id":"5dea3377-0af2-48da-8666-5ee9452e25c5","name":"urlString2","type":"string","value":"={{ $('Parse - Get Page Engagement Prior Week').first().json.urlString }}"},{"id":"c6aa5d4d-d1e5-4493-96fd-60b2298ff6da","name":"urlString3","type":"string","value":"={{ $('Parse - Get Google Search This Week').first().json.urlString }}"},{"id":"711cb4fa-3e8c-4ad6-9b25-e2447d7492d1","name":"urlString4","type":"string","value":"={{ $('Parse - Get Google Search Prior Week').first().json.urlString }}"},{"id":"775bc64a-7986-48fb-a36d-4101158b83f0","name":"urlString5","type":"string","value":"={{ $('Parse - Country Views This Week').first().json.urlString }}"},{"id":"a6ae27a0-89b5-4a6f-8328-327750835c8d","name":"urlString6","type":"string","value":"={{ $('Parse - Country Views Prior Week').first().json.urlString }}"}]},"options":{}},"id":"006956f6-881a-435c-9114-964a8362a14b","name":"Set urlStrings","type":"n8n-nodes-base.set","position":[340,780],"typeVersion":3.4},{"parameters":{"jsCode":"const input = $input.first().json;\n\n// Extract data\nconst engagementStats = input.engagementStats || {};\nconst searchResults = input.searchResults || {};\nconst countryViews = input.countryViews || {};\n\n// Helper function to generate HTML for a table\nfunction generateTable(headers, rows, color) {\n    let table = `<table border=\"1\" style=\"border-collapse:collapse; width:100%; border:1px solid ${color};\">`;\n    // Add table headers\n    table += `<thead style=\"background-color:${color}; color:white;\"><tr>`;\n    headers.forEach(header => {\n        table += `<th style=\"padding:8px; text-align:left; border:1px solid ${color};\">${header}</th>`;\n    });\n    table += '</tr></thead>';\n    // Add table rows\n    table += '<tbody>';\n    rows.forEach(row => {\n        table += '<tr>';\n        row.forEach(cell => {\n            table += `<td style=\"padding:8px; border:1px solid ${color};\">${cell}</td>`;\n        });\n        table += '</tr>';\n    });\n    table += '</tbody></table>';\n    return table;\n}\n\n// Get today's date\nconst today = new Date();\nconst formattedDate = today.toLocaleDateString(undefined, {\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n});\n\n// Generate HTML content\nconst title = `GA Report for ${formattedDate}`;\nlet htmlContent = `<h1 style=\"text-align:center; color:#333;\">${title}</h1>`;\n\n// Colors for each segment\nconst engagementColor = '#4CAF50';\nconst searchColor = '#2196F3';\nconst countryColor = '#FF9800';\n\nhtmlContent += `<h2 style=\"color:${engagementColor};\">Engagement Stats</h2>`;\nhtmlContent += `<h3 style=\"color:#333;\">This Week</h3>`;\nif (engagementStats.thisWeek?.length) {\n    const headers = ['Page', 'Page Views', 'Active Users', 'Views per User', 'Event Count'];\n    const rows = engagementStats.thisWeek.map(stat => [\n        stat.page,\n        stat.pageViews,\n        stat.activeUsers,\n        stat.viewsPerUser.toFixed(2),\n        stat.eventCount,\n    ]);\n    htmlContent += generateTable(headers, rows, engagementColor);\n} else {\n    htmlContent += `<p style=\"color:${engagementColor};\">No data available for this week.</p>`;\n}\n\nhtmlContent += `<h3 style=\"color:#333;\">Prior Week</h3>`;\nif (engagementStats.priorWeek?.length) {\n    const headers = ['Page', 'Page Views', 'Active Users', 'Views per User', 'Event Count'];\n    const rows = engagementStats.priorWeek.map(stat => [\n        stat.page,\n        stat.pageViews,\n        stat.activeUsers,\n        stat.viewsPerUser.toFixed(2),\n        stat.eventCount,\n    ]);\n    htmlContent += generateTable(headers, rows, engagementColor);\n} else {\n    htmlContent += `<p style=\"color:${engagementColor};\">No data available for prior week.</p>`;\n}\n\nhtmlContent += `<h2 style=\"color:${searchColor};\">Search Results</h2>`;\nhtmlContent += `<h3 style=\"color:#333;\">This Week</h3>`;\nif (searchResults.thisWeek?.length) {\n    const headers = ['Page', 'Active Users', 'Engaged Sessions', 'Engagement Rate', 'Event Count', 'Avg Position', 'CTR', 'Clicks', 'Impressions'];\n    const rows = searchResults.thisWeek.map(result => [\n        result.page,\n        result.activeUsers,\n        result.engagedSessions,\n        result.engagementRate.toFixed(2),\n        result.eventCount,\n        result.avgPosition.toFixed(2),\n        result.ctr.toFixed(2),\n        result.clicks,\n        result.impressions,\n    ]);\n    htmlContent += generateTable(headers, rows, searchColor);\n} else {\n    htmlContent += `<p style=\"color:${searchColor};\">No data available for this week.</p>`;\n}\n\nhtmlContent += `<h3 style=\"color:#333;\">Last Week</h3>`;\nif (searchResults.lastWeek?.length) {\n    const headers = ['Page', 'Active Users', 'Engaged Sessions', 'Engagement Rate', 'Event Count', 'Avg Position', 'CTR', 'Clicks', 'Impressions'];\n    const rows = searchResults.lastWeek.map(result => [\n        result.page,\n        result.activeUsers,\n        result.engagedSessions,\n        result.engagementRate.toFixed(2),\n        result.eventCount,\n        result.avgPosition.toFixed(2),\n        result.ctr.toFixed(2),\n        result.clicks,\n        result.impressions,\n    ]);\n    htmlContent += generateTable(headers, rows, searchColor);\n} else {\n    htmlContent += `<p style=\"color:${searchColor};\">No data available for last week.</p>`;\n}\n\nhtmlContent += `<h2 style=\"color:${countryColor};\">Country Views</h2>`;\nhtmlContent += `<h3 style=\"color:#333;\">This Week</h3>`;\nif (countryViews.thisWeek?.length) {\n    const headers = ['Country', 'Active Users', 'New Users', 'Engagement Rate', 'Engaged Sessions', 'Event Count', 'Total Users', 'Sessions'];\n    const rows = countryViews.thisWeek.map(view => [\n        view.country,\n        view.activeUsers,\n        view.newUsers,\n        view.engagementRate.toFixed(2),\n        view.engagedSessions,\n        view.eventCount,\n        view.totalUsers,\n        view.sessions,\n    ]);\n    htmlContent += generateTable(headers, rows, countryColor);\n} else {\n    htmlContent += `<p style=\"color:${countryColor};\">No data available for this week.</p>`;\n}\n\nhtmlContent += `<h3 style=\"color:#333;\">Last Week</h3>`;\nif (countryViews.lastWeek?.length) {\n    const headers = ['Country', 'Active Users', 'New Users', 'Engagement Rate', 'Engaged Sessions', 'Event Count', 'Total Users', 'Sessions'];\n    const rows = countryViews.lastWeek.map(view => [\n        view.country,\n        view.activeUsers,\n        view.newUsers,\n        view.engagementRate.toFixed(2),\n        view.engagedSessions,\n        view.eventCount,\n        view.totalUsers,\n        view.sessions,\n    ]);\n    htmlContent += generateTable(headers, rows, countryColor);\n} else {\n    htmlContent += `<p style=\"color:${countryColor};\">No data available for last week.</p>`;\n}\n\n// Output the title and formatted HTML\nreturn {\n    json: {\n        title,\n        htmlContent,\n    }\n};\n"},"id":"62d72726-1e57-4a1c-baf7-4ac83179c0cd","name":"Format Data","type":"n8n-nodes-base.code","position":[340,1120],"typeVersion":2},{"parameters":{"jsCode":"console.log($input.all());\nreturn $input.all();\n"},"id":"6e20ce6f-5710-4c28-b355-2fe1b3268cb2","name":"Input All","type":"n8n-nodes-base.code","position":[740,780],"typeVersion":2},{"parameters":{"content":"## Format the data and Email","height":295.7350020039967,"width":1264.897623827279,"color":5},"id":"53bcdaa9-46bf-4b30-96d5-76d8e64d9bdb","name":"Sticky Note5","type":"n8n-nodes-base.stickyNote","position":[260,1020],"typeVersion":1},{"parameters":{"sendTo":"info@alexk1919.com","subject":"=KBB {{ $json.title }}","message":"={{ $json.htmlContent }}","options":{"senderName":"Alex Kim"}},"id":"c76215dd-551e-48e6-aaf3-843c7ac5d52c","name":"Email the Report","type":"n8n-nodes-base.gmail","position":[540,1120],"webhookId":"11ad7126-979e-4322-baf8-5ecdca06da81","typeVersion":2.1,"credentials":{"gmailOAuth2":{"id":"ZFO7RsD2iqGx7iDm","name":"Gmail account"}}},{"parameters":{"rule":{"interval":[{}]}},"id":"bd14fd75-0a5f-4498-ab7f-aab02949002b","name":"Schedule Trigger","type":"n8n-nodes-base.scheduleTrigger","position":[60,780],"typeVersion":1.2}],"connections":{"Input All":{"main":[[{"node":"Format Data","type":"main","index":0}]]},"Format Data":{"main":[[{"node":"Email the Report","type":"main","index":0}]]},"Aggregate Data":{"main":[[{"node":"Input All","type":"main","index":0}]]},"Set urlStrings":{"main":[[{"node":"Aggregate Data","type":"main","index":0}]]},"Parse - Country Views This Week":{"main":[[{"node":"Get Country views data for prior week","type":"main","index":0}]]},"Parse - Country Views Prior Week":{"main":[[{"node":"Set urlStrings","type":"main","index":0}]]},"When clicking ‘Test workflow’":{"main":[[{"node":"Get Page Engagement Stats for this week","type":"main","index":0}]]},"Parse - Get Google Search This Week":{"main":[[{"node":"Get Google Search Results for prior week","type":"main","index":0}]]},"Get Country views data for this week":{"main":[[{"node":"Parse - Country Views This Week","type":"main","index":0}]]},"Parse - Get Google Search Prior Week":{"main":[[{"node":"Get Country views data for this week","type":"main","index":0}]]},"Get Country views data for prior week":{"main":[[{"node":"Parse - Country Views Prior Week","type":"main","index":0}]]},"Parse - Get Page Engagement This Week":{"main":[[{"node":"Get Page Engagement Stats for prior week","type":"main","index":0}]]},"Parse - Get Page Engagement Prior Week":{"main":[[{"node":"Get Google Search Results for this week","type":"main","index":0}]]},"Get Google Search Results for this week":{"main":[[{"node":"Parse - Get Google Search This Week","type":"main","index":0}]]},"Get Page Engagement Stats for this week":{"main":[[{"node":"Parse - Get Page Engagement This Week","type":"main","index":0}]]},"Get Google Search Results for prior week":{"main":[[{"node":"Parse - Get Google Search Prior Week","type":"main","index":0}]]},"Get Page Engagement Stats for prior week":{"main":[[{"node":"Parse - Get Page Engagement Prior Week","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":null,"pinData":{},"versionId":"089b9698-51d4-401c-be77-9af0b519d955","triggerCount":0,"tags":[]}